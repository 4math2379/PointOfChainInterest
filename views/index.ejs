<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <title>POI</title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    
    <script src='https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v1.11.1/mapbox-gl.css' rel='stylesheet' />
    <script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.2.0/mapbox-gl-geocoder.min.js'></script>
    <link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.2.0/mapbox-gl-geocoder.css' type='text/css' />
    <style>
        body {
          margin: 0;
          padding: 0;
        }

        #map {
          position: absolute;
          right: 150px;
          height: 120;
          top: 0;
          bottom: 0;
          width: 50%;
        }

        .enableEthereumButton {
          position: relative;
          left: 75px;
          border: none;
    color: rgba(2, 10, 0, 0.333);
    padding: 15px 32px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
        }
      
        section {
  margin: 20px 0 20px 0;
}

.info-text {
  font-size: 1.1em;
}

.full-width {
  width: 100%;
}






    </style>
</head>
<body>


  <div><button class="enableEthereumButton">Enable Ethereum</button></div>

  <div id='map' , width='50%' height='200px'></div>

  <section>
    <div class="row d-flex justify-content-center">
      <div class="col-xl-4 col-lg-6 col-md-12 col-sm-12 col-12">
        <div class="card">
          <img class="card-img-top" src="https://metamask.io/images/mm-logo.svg">
          <div class="card-body">
            <h4 class="card-title">Chain actions</h4>
            <button class="btn btn-primary btn-lg btn-block mb-3" id="connectButton" disabled></button>
            <button class="btn btn-primary btn-lg btn-block mb-3" id="getAccounts">eth_accounts</button>
            <p class="info-text alert alert-secondary">eth_accounts result: <span id="getAccountsResult"></span></p>
          </div>
        </div>
      </div>
    </div>
  </section>


<script>
  mapboxgl.accessToken = 'pk.eyJ1Ijoic3RhcmRyb25lIiwiYSI6ImNqMHc1Yjk3dTAwMDMzMnBiOGpyOWtkdzYifQ.bwSvCsXuGWxSvWpnP0tw9w';
  var map = new mapboxgl.Map({
    container: 'map', // Container ID
    style: 'mapbox://styles/stardrone/ckkd8b1lc01ss17qsfphtsu02', // Map style to use
    center: [2.3522219,48.856614], // Starting position [lng, lat]
    zoom: 12, // Starting zoom level
  });

  //data events
  map.on('data', function(){
    console.log('data event occured');
  });


  map.addControl(new mapboxgl.NavigationControl());



  /*map.addControl(new mapboxgl.GeolocateControl({
    positionOptions: {
        enableHighAccuracy: true
    },
    trackUserLocation: true
}));*/


//enrichements sources for air quality just example for data
var pm25 = ['<', ['get', 'pm25'], 100];
var pm10 = ['<', ['get', 'pm10'], 30];
var o3= ['<',['get', 'o3'], 20];
var no2= ['<', ['get', 'no2'], 35];
var so2= ['>', ['get', 'so2'],9];
var co = ['>',['get', 'co'], 10];


//colors for the data
var colors = ['#fed976', '#feb24c', '#fd8d3c', '#fc4e2a', '#e31a1c'];




//ethereum connection 
//const ethereumButton = document.querySelector('.enableEthereumButton');


/*ethereumButton.addEventListener('click', () => {
  //Will Start the metamask extension
  ethereum.request({ method: 'eth_requestAccounts' });
});*/

//more ETH actions and Metamask verfication
const initialize = () => {
  //section of action listed 
  const onboardButton = document.getElementById('connectButton');
  //Created check function to see if the MetaMask extension is installed
  const isMetaMaskInstalled = () => {
    //Have to check the ethereum binding on the window object to see if it's installed
    const { ethereum } = window;
    return Boolean(ethereum && ethereum.isMetaMask);

    const MetaMaskClientCheck = () => {
  //Now we check to see if Metmask is installed
  if (!isMetaMaskInstalled()) {
    //If it isn't installed we ask the user to click to install it
    onboardButton.innerText = 'Click here to install MetaMask!';
    //When the button is clicked we call this function
    onboardButton.onclick = onClickInstall;
    //The button is now disabled
    onboardButton.disabled = false;
  } else {
    //If it is installed we change our button text
    onboardButton.innerText = 'Connect';
  }
};
MetaMaskClientCheck();



  };

  



};








  var geocoder = new MapboxGeocoder({ // Initialize the geocoder
    accessToken: mapboxgl.accessToken, // Set the access token
    mapboxgl: mapboxgl, // Set the mapbox-gl instance
    marker: false, // Do not use the default marker style
    placeholder: 'Search for places' // Placeholder text for the search bar
      
  });

  // Add the geocoder to the map
  map.addControl(geocoder);

  // After the map style has loaded on the page,
  // add a source layer and default styling for a single point
  map.on('load', function() {
    map.addSource('paris_airQuality', {
      'type': 'geojson',
      'data': 'https://gist.githubusercontent.com/4math2379/11c9a6a8139ecd3cc7b1ec918d5ff6ad/raw/750fe314ead228d1111163a715d442715a67dc2d/map.geojson',
      'cluster':true,
      'clusterRadius': 80,
      'clusterProperties' : {
        'pm25': ['+', ['case', pm25, 1, 0]],
        'pm10': ['+', ['case', pm10, 1, 0]],
        'o3': ['+', ['case', o3, 1, 0]],
        'no2': ['+', ['case', no2, 1, 0]],
        'so2': ['+', ['case',so2, 1, 0]],
        'co': ['+', ['case',co, 1, 0]]

      }
    });

    map.addLayer({
      'id': 'airQuality_circle',
      'source': 'paris_airQuality',
      'type': 'circle',
      'filter': ['!=', 'cluster', true],
      'paint': {
        'circle-color': [
'case',
pm25,
colors[0],
pm10,
colors[1],
o3,
colors[2],
co,
colors[3],
colors[4],
],
        'circle-radius': 20,
        
      }
    });



    //layer for the stats , refining for other data . not relevent just for displaying
    map.addLayer({
'id': 'airQuality_label',
'type': 'symbol',
'source': 'paris_airQuality',
'filter': ['!=', 'cluster', true],
'layout': {
'text-field': [
'number-format',
['get', 'o3'],
{ 'min-fraction-digits': 1, 'max-fraction-digits': 1 }
],
'text-font': ['Open Sans Semibold', 'Arial Unicode MS Bold'],
'text-size': 10
},
'paint': {
'text-color': [
'case',
['<', ['get', 'o3'], 3],
'black',
'white'
]
}
});


// objects for caching and keeping track of HTML marker objects (for performance)
var markers = {};
var markersOnScreen = {};
 
function updateMarkers() {
var newMarkers = {};
var features = map.querySourceFeatures('paris_airQuality');
 
// for every cluster on the screen, create an HTML marker for it (if we didn't yet),
// and add it to the map if it's not there already
for (var i = 0; i < features.length; i++) {
var coords = features[i].geometry.coordinates;
var props = features[i].properties;
if (!props.cluster) continue;
var id = props.cluster_id;
 
var marker = markers[id];
if (!marker) {
var el = createDonutChart(props);
marker = markers[id] = new mapboxgl.Marker({
element: el
}).setLngLat(coords);
}
newMarkers[id] = marker;
 
if (!markersOnScreen[id]) marker.addTo(map);
}
// for every marker we've added previously, remove those that are no longer visible
for (id in markersOnScreen) {
if (!newMarkers[id]) markersOnScreen[id].remove();
}
markersOnScreen = newMarkers;
}
 
// after the GeoJSON data is loaded, update markers on the screen and do so on every map move/moveend
map.on('data', function (e) {
if (e.sourceId !== 'paris_airQuality' || !e.isSourceLoaded) return;
 
map.on('move', updateMarkers);
map.on('moveend', updateMarkers);
updateMarkers();
});
});
 
// code for creating an SVG donut chart from feature properties
function createDonutChart(props) {
var offsets = [];
var counts = [
props.pm25,
props.pm10,
props.no2,
props.co,
props.so2,
props.o3
];
var total = 0;
for (var i = 0; i < counts.length; i++) {
offsets.push(total);
total += counts[i];
}
var fontSize =
total >= 1000 ? 22 : total >= 100 ? 20 : total >= 10 ? 18 : 16;
var r = total >= 1000 ? 50 : total >= 100 ? 32 : total >= 10 ? 24 : 18;
var r0 = Math.round(r * 0.6);
var w = r * 2;
 
var html =
'<div><svg width="' +
w +
'" height="' +
w +
'" viewbox="0 0 ' +
w +
' ' +
w +
'" text-anchor="middle" style="font: ' +
fontSize +
'px sans-serif; display: block">';
 
for (i = 0; i < counts.length; i++) {
html += donutSegment(
offsets[i] / total,
(offsets[i] + counts[i]) / total,
r,
r0,
colors[i]
);
}
html +=
'<circle cx="' +
r +
'" cy="' +
r +
'" r="' +
r0 +
'" fill="white" /><text dominant-baseline="central" transform="translate(' +
r +
', ' +
r +
')">' +
total.toLocaleString() +
'</text></svg></div>';
 
var el = document.createElement('div');
el.innerHTML = html;
return el.firstChild;
}
 
function donutSegment(start, end, r, r0, color) {
if (end - start === 1) end -= 0.00001;
var a0 = 2 * Math.PI * (start - 0.25);
var a1 = 2 * Math.PI * (end - 0.25);
var x0 = Math.cos(a0),
y0 = Math.sin(a0);
var x1 = Math.cos(a1),
y1 = Math.sin(a1);
var largeArc = end - start > 0.5 ? 1 : 0;
 
return [
'<path d="M',
r + r0 * x0,
r + r0 * y0,
'L',
r + r * x0,
r + r * y0,
'A',
r,
r,
0,
largeArc,
1,
r + r * x1,
r + r * y1,
'L',
r + r0 * x1,
r + r0 * y1,
'A',
r0,
r0,
0,
largeArc,
0,
r + r0 * x0,
r + r0 * y0,
'" fill="' + color + '" />'
].join(' ');
}








    // The `click` event is an example of a `MapMouseEvent`.
// Set up an event listener on the map.
/*map.on('click', function(c) {

  const point = {
    popUser: function () {
      console.log(`You are at coordinates  ${this.coordinate}.` );
    }
  };
  const onPoint = Object.create(point);
  onPoint.coordinate = c.lngLat;

  onPoint.popUser();
  
  
});*/



    // Listen for the `result` event from the Geocoder
    // `result` event is triggered when a user makes a selection
    // Add a marker at the result's coordinates
    geocoder.on('result', function(ev) {
      map.getSource('paris_airQuality').setData(ev.result.geometry);
      
    });



// Control implemented as ES5 prototypical class
function HelloWorldControl() { }

HelloWorldControl.prototype.onAdd = function(map) {
    this._map = map;
    this._container = document.createElement('div');
    this._container.className = 'mapboxgl-ctrl';
    this._container.textContent = 'Hello, world';
    return this._container;
};

HelloWorldControl.prototype.onRemove = function () {
     this._container.parentNode.removeChild(this._container);
     this._map = undefined;
};



</script>
<script src="node_modules\@metamask\onboarding\dist\metamask-onboarding.bundle.js" defer></script>
</body>
</html>